@using CourseProject.Models.MainModelViews
@inject UserManager<AppUser> _userManager
@model Template
@{
    ViewData["Title"] = Model.Id == 0 ? "Создать новый шаблон" : "Редактировать шаблон";
}

<div class="container mt-4">
    <form asp-action="@(Model.Id == 0 ? "Template" : "Edit")"
          asp-controller="CreateTemplate"
          enctype="multipart/form-data"
          method="post"
          id="templateForm">
        <div asp-validation-summary="All" class="text-danger"></div>
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="AuthorId" />
        <input type="hidden" asp-for="Type" />

        <!-- Основная информация -->
        <div class="card mb-4 shadow">
            <div class="card-header bg-primary text-white">
                <h4><i class="bi bi-file-earmark-text"></i> @(Model.Id == 0 ? "Основные настройки" : "Редактирование шаблона")</h4>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(Model.ImagePath))
                {
                    <div class="mb-3">
                        <label class="form-label">Текущее изображение</label>
                        <div>
                            <img src="@Model.ImagePath" class="img-thumbnail" style="max-width: 200px;" />
                            <div class="form-check mt-2">
                                <input class="form-check-input" type="checkbox" id="removeImage" name="removeImage" value="true">
                                <label class="form-check-label" for="removeImage">Удалить изображение</label>
                            </div>
                        </div>
                    </div>
                }

                <div class="mb-3">
                    <label asp-for="Title" class="form-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Description" class="form-label"></label>
                    <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">@(Model.Id == 0 ? "Загрузить изображение" : "Изменить изображение")</label>

                        <div class="drop-zone" id="dropZone">
                            <div class="drop-content">
                                <i class="bi bi-image fs-1 text-muted"></i>
                                <p class="mt-2">Перетащите изображение сюда</p>
                                <p class="text-muted small">или</p>
                                <button type="button"
                                        class="btn btn-outline-primary btn-sm"
                                        id="selectFileButton">
                                    Выберите файл
                                </button>
                            </div>

                            <input type="file"
                                   asp-for="ImageFile"
                                   id="fileInput"
                                   class="d-none"
                                   accept="image/*">
                        </div>

                        <div class="preview-container mt-2" id="previewContainer" style="display: none;">
                            <img id="imagePreview" class="img-thumbnail" style="max-width: 200px;">
                            <div class="mt-2">
                                <button type="button"
                                        class="btn btn-danger btn-sm"
                                        id="deleteImageButton">
                                    <i class="bi bi-trash"></i> Удалить
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="TopicId" class="form-label"></label>
                        <select asp-for="TopicId" class="form-select" asp-items="ViewBag.Topics">
                            <option value="">Выберите категорию</option>
                        </select>
                        <span asp-validation-for="TopicId" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Вопросы -->
        <div class="card mb-4 shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center sticky-top"
                 style="top: 60px; z-index: 1020;">
                <h4 class="mb-0"><i class="bi bi-question-circle me-2"></i>Управление вопросами</h4>
                <div class="btn-group gap-2">
                    <div class="dropdown">
                        <button class="btn btn-light btn-sm dropdown-toggle"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            <i class="bi bi-plus-lg"></i> Добавить вопрос
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <button class="dropdown-item" type="button" data-type="Text" data-action="add-question">
                                    <i class="bi bi-input-cursor-text me-2"></i>Краткий ответ
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" type="button" data-type="Paragraph" data-action="add-question">
                                    <i class="bi bi-textarea-t me-2"></i>Абзац
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <button class="dropdown-item" type="button" data-type="Radio" data-action="add-question">
                                    <i class="bi bi-ui-radios me-2"></i>Один из списка
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" type="button" data-type="Checkbox" data-action="add-question">
                                    <i class="bi bi-ui-checks-grid me-2"></i>Несколько из списка
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" type="button" data-type="Dropdown" data-action="add-question">
                                    <i class="bi bi-menu-button me-2"></i>Выпадающий список
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <button class="dropdown-item" type="button" data-type="YesNo" data-action="add-question">
                                    <i class="bi bi-toggle-on me-2"></i>Да/Нет
                                </button>
                            </li>
                        </ul>
                    </div>
                    <button class="btn btn-light btn-sm" type="button" data-action="duplicate">
                        <i class="bi bi-files"></i> Копировать
                    </button>
                    <button class="btn btn-light btn-sm" type="button" data-action="delete">
                        <i class="bi bi-trash"></i> Удалить
                    </button>
                </div>
            </div>

            <div class="card-body" id="questionsContainer">
                @for (int i = 0; i < Model.Questions.Count; i++)
                {
                    var question = Model.Questions[i];
                    var showOptions = question.Type == QuestionType.Radio ||
                    question.Type == QuestionType.Checkbox ||
                    question.Type == QuestionType.Dropdown;

                    <div class="card mb-3 shadow-sm question-item"
                         data-type="@question.Type"
                         data-question-index="@i"
                         data-question-id="@question.Id">

                        <input type="hidden" asp-for="@Model.Questions[i].Id" />
                        <input type="hidden" asp-for="@Model.Questions[i].Order" class="question-order" />
                        <input type="hidden" asp-for="@Model.Questions[i].Type" class="question-type" />
                        <input type="hidden" asp-for="@Model.Questions[i].Template" value="Default" />
                        <input type="hidden" asp-for="@Model.Questions[i].Description" value="No description" />

                        @if (question.Type != QuestionType.Text)
                        {
                            <input type="hidden" asp-for="@Model.Questions[i].TextType" value="" />
                        }

                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center gap-3">
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-primary dropdown-toggle question-type-btn"
                                            type="button"
                                            data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                        <i class="bi @GetQuestionIcon(question.Type) me-2"></i>
                                        <span class="question-type-label">@GetQuestionTypeName(question.Type)</span>
                                    </button>
                                    <ul class="dropdown-menu question-type-menu">
                                        @foreach (var type in Enum.GetValues(typeof(QuestionType)))
                                        {
                                            <li>
                                                <button class="dropdown-item"
                                                        data-action="change-type"
                                                        data-type="@type">
                                                    <i class="bi @GetQuestionIcon((QuestionType)type) me-2"></i>
                                                    @GetQuestionTypeName((QuestionType)type)
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <div class="form-check form-switch">
                                    <input type="hidden"
                                           type="checkbox"
                                           asp-for="@Model.Questions[i].IsRequired"
                                           value="false"
                                           style="position: absolute; left: -9999px;" />
                                    <input class="form-check-input"
                                           type="checkbox"
                                           asp-for="@Model.Questions[i].IsRequired"
                                           value="true" />

                                    <label class="form-check-label">Обязательный</label>
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <div class="form-check">
                                    <input class="form-check-input question-selector" type="checkbox">
                                </div>
                                <button class="btn btn-link text-danger p-0"
                                        data-action="delete">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <input asp-for="@Model.Questions[i].Text"
                                       class="form-control border-0 border-bottom rounded-0 fs-5 px-0 question-title"
                                       placeholder="Введите вопрос" />
                                <span asp-validation-for="@Model.Questions[i].Text" class="text-danger"></span>
                                <div class="mt-3">
                                    <label class="form-label">Поле для ответа:</label>
                                </div>
                            </div>

                            @if (question.Type == QuestionType.Text)
                            {
                                <div class="row align-items-center mt-3">
                                    <div class="col-md-4">
                                        <select asp-for="@Model.Questions[i].TextType"
                                                class="form-select text-type-select">
                                            <option value="text">Текст</option>
                                            <option value="number">Число</option>
                                            <option value="date">Дата</option>
                                            <option value="time">Время</option>
                                            <option value="email">Email</option>
                                        </select>
                                    </div>
                                    <div class="col-md-8">
                                        <input type="text"
                                               class="form-control"
                                               placeholder="Текст ответа"
                                        @GetInputAttributes(question.TextType)
                                               disabled>
                                    </div>
                                </div>
                            }

                            @if (showOptions)
                            {
                                <div class="options-container" data-question-index="@i">
                                    @for (int j = 0; j < Model.Questions[i].Options.Count; j++)
                                    {
                                        <div class="input-group mb-2">
                                            <input type="hidden" asp-for="@Model.Questions[i].Options[j].Id" />
                                            <span class="input-group-text">
                                                <i class="bi @GetOptionIcon(question.Type)"></i>
                                            </span>
                                            <input asp-for="@Model.Questions[i].Options[j].Text"
                                                   class="form-control"
                                                   placeholder="Вариант ответа" />
                                            <button class="btn btn-outline-danger"
                                                    type="button"
                                                    data-action="remove-option">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                    <button class="btn btn-sm btn-outline-primary w-100"
                                            type="button"
                                            data-action="add-option">
                                        <i class="bi bi-plus-lg me-2"></i>Добавить вариант
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Дополнительные настройки -->
        <div class="card mb-4 shadow">
            <div class="card-header bg-primary text-white">
                <h4><i class="bi bi-gear"></i> Дополнительные настройки</h4>
            </div>
            <div class="card-body">
                <div class="access-options">
                    <!-- Публичный доступ -->
                    <div class="access-item mb-3 p-3 border rounded">
                        <div class="form-check">
                            <input class="form-check-input access-type" type="radio"
                                   name="accessType" id="publicAccess" value="Public" asp-for="AccessType">
                            <label class="form-check-label d-block" for="publicAccess">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-globe fs-5 me-3"></i>
                                    <div>
                                        <h5 class="mb-1">Публичный доступ</h5>
                                        <small class="text-muted">Доступен всем пользователям</small>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- Приватный доступ -->
                    <div class="access-item mb-3 p-3 border rounded">
                        <div class="form-check">
                            <input class="form-check-input access-type"
                                   type="radio"
                                   name="accessType"
                                   id="privateAccess"
                                   value="Private" asp-for="AccessType">
                            <label class="form-check-label d-block" for="privateAccess">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-lock fs-5 me-3"></i>
                                    <div>
                                        <h5 class="mb-1">Приватный доступ</h5>
                                        <small class="text-muted">Только выбранные пользователи</small>
                                    </div>
                                </div>
                            </label>
                        </div>

                        <div id="privateAccessBlock" class="mt-3">
                            <div class="mb-3">
                                <label>Добавить пользователей:</label>
                                <input type="text" id="userSearch" class="form-control"
                                       placeholder="Введите имя или email">
                                <div id="userSearchError" class="text-danger d-none">Выберите пользователя из списка</div>

                                <div id="selectedUsers" class="mt-2">
                                    @foreach (var user in Model.AllowedUsers)
                                    {
                                        <span class="badge bg-secondary me-1 mb-1">
                                            @user.User.UserName
                                            <input type="hidden" name="selectedUserIds" value="@user.UserId">
                                            <button type="button" class="btn-close btn-close-white"
                                                    onclick="removeUser(this)"></button>
                                        </span>
                                    }
                                </div>
                                <div id="selectedUsersError" class="text-danger d-none">Добавьте хотя бы одного пользователя</div>
                            </div>
                        </div>
                    </div>

                    <!-- Доступ по ссылке -->
                    <div class="access-item p-3 border rounded">
                        <div class="form-check">
                            <input class="form-check-input access-type" type="radio"
                                   name="accessType" id="linkAccess" value="Link" asp-for="AccessType">
                            <label class="form-check-label d-block" for="linkAccess">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-link-45deg fs-5 me-3"></i>
                                    <div>
                                        <h5 class="mb-1">Доступ по ссылке</h5>
                                        <small class="text-muted">Только те, у кого есть ссылка</small>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div id="linkAccessBlock" class="mt-3">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control"
                                       id="shareLink"
                                       value="@Url.Action("Answer", "Template", new { id = Model.Id, key = Model.LinkKey })"
                                       readonly>
                                <button class="btn btn-outline-secondary" type="button"
                                        onclick="copyToClipboard(this)">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                            </div>
                            <small class="text-muted mt-1 d-block">(!!!! Щас это просто заглушка, можно выбрать, но функционал никакого нет, просто не отобразится в главном меню)</small>
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Теги</label>
                    <input id="tagsInput" name="tags" class="form-control"
                           placeholder="Введите тег...">
                    @*  <div id="selectedTags" class="mt-2">
                        @for (int i = 0; i < Model.Tags.Count; i++)
                        {
                            <span class="badge bg-secondary me-1 mb-1">
                                @Model.Tags[i].Tag.Name
                                <input type="hidden" asp-for="@Model.Tags[i].TagId" />
                                <button type="button" class="btn-close btn-close-white"></button>
                            </span>
                        }
                    </div> *@
                </div>
            </div>
        </div>

        <div class="text-end">
            <button type="submit" class="btn btn-primary btn-lg">
                <i class="bi bi-save"></i>
                @(Model.Id == 0 ? "Создать шаблон" : "Сохранить изменения")
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Обновленный код для управления видимостью блоков
        document.addEventListener('DOMContentLoaded', function() {
            // Находим элементы
            const privateRadio = document.getElementById('privateAccess');
            const linkRadio = document.getElementById('linkAccess');
            const privateBlock = document.getElementById('privateAccessBlock');
            const linkBlock = document.getElementById('linkAccessBlock');

            // Функция обновления видимости
            function updateAccessBlocks() {
                // Убедимся что элементы существуют
                if (!privateRadio || !linkRadio || !privateBlock || !linkBlock) return;

                // Устанавливаем видимость
                privateBlock.style.display = privateRadio.checked ? 'block' : 'none';
                linkBlock.style.display = linkRadio.checked ? 'block' : 'none';
            }

            // Вешаем обработчики
            document.querySelectorAll('input[name="accessType"]').forEach(radio => {
                radio.addEventListener('change', updateAccessBlocks);
            });

            // Первоначальная настройка
            updateAccessBlocks();

            // Добавим лог для отладки
            console.log('Инициализация завершена', {
                privateChecked: privateRadio.checked,
                linkChecked: linkRadio.checked
            });
        });

        // Автодополнение пользователей
        const userSearch = document.getElementById('userSearch');
        const selectedUsers = document.getElementById('selectedUsers');
        let searchTimeout;

        userSearch.addEventListener('input', function(e) {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(async () => {
                const term = e.target.value.trim();
                if(term.length < 2) return;

                const response = await fetch(`/CreateTemplate/SearchUsers?term=${encodeURIComponent(term)}`);
                const users = await response.json();

                // Показываем простой dropdown
                showSuggestions(users);
            }, 300);
        });

        // Обновленная функция показа подсказок
        function showSuggestions(users) {
            // Удаляем предыдущие подсказки
            const oldSuggestions = document.querySelector('.suggestions-container');
            if (oldSuggestions) oldSuggestions.remove();

            // Создаем новый контейнер
            const container = document.createElement('div');
            container.className = 'suggestions-container mt-2 border rounded';
            container.style.maxHeight = '200px';
            container.style.overflowY = 'auto';

            users.forEach(user => {
                const item = document.createElement('div');
                item.className = 'p-2 border-bottom hover-bg';
                item.textContent = user.label;
                item.onclick = () => {
                    addUser(user);
                    container.remove(); // Удаляем контейнер после выбора
                };
                container.appendChild(item);
            });

            // Вставляем после поля поиска
            userSearch.parentNode.insertBefore(container, userSearch.nextSibling);
        }

        function addUser(user) {
            if(!document.querySelector(`input[value="${user.value}"]`)) {
                selectedUsers.innerHTML += `
                    <span class="badge bg-secondary me-1 mb-1">
                        ${user.label}
                        <input type="hidden" name="selectedUserIds" value="${user.value}">
                        <button type="button" class="btn-close btn-close-white"
                                onclick="this.parentElement.remove()"></button>
                    </span>
                `;
            }
            userSearch.value = '';
        }

        // Валидация формы
        document.querySelector('form').onsubmit = function(e) {
            if(document.getElementById('privateAccess').checked &&
               document.querySelectorAll('[name="selectedUserIds"]').length === 0) {
                e.preventDefault();
                alert('Добавьте хотя бы одного пользователя для приватного доступа!');
            }
        };

        // Конфигурация типов вопросов
        const QUESTION_TYPES = {
            Text: {
                icon: 'bi-input-cursor-text',
                name: 'Текстовый ответ',
                template: (questionIndex, textType = 'text') => `
                    <div class="row align-items-center mt-3">
                        <div class="col-md-4">
                            <select class="form-select text-type-select"
                                    name="Questions[${questionIndex}].TextType">
                                <option value="text" ${textType === 'text' ? 'selected' : ''}>Текст</option>
                                <option value="number" ${textType === 'number' ? 'selected' : ''}>Число</option>
                                <option value="date" ${textType === 'date' ? 'selected' : ''}>Дата</option>
                                <option value="time" ${textType === 'time' ? 'selected' : ''}>Время</option>
                                <option value="email" ${textType === 'email' ? 'selected' : ''}>Email</option>
                            </select>
                        </div>
                        <div class="col-md-8">
                            <input type="text"
                                   class="form-control"
                                   placeholder="Текст ответа"
                                   ${getTextTypeAttributes(textType)}
                                   disabled>
                        </div>
                    </div>
                `
            },
            Paragraph: {
                icon: 'bi-textarea-t',
                name: 'Абзац',
                template: () => '<textarea class="form-control" rows="3" placeholder="Длинный ответ" disabled></textarea>'
            },
            Radio: {
                icon: 'bi-ui-radios',
                name: 'Один из списка',
                template: (questionIndex, options = []) => renderOptionsTemplate('Radio', questionIndex, options)
            },
            Checkbox: {
                icon: 'bi-ui-checks-grid',
                name: 'Несколько из списка',
                template: (questionIndex, options = []) => renderOptionsTemplate('Checkbox', questionIndex, options)
            },
            Dropdown: {
                icon: 'bi-menu-button',
                name: 'Выпадающий список',
                template: (questionIndex, options = []) => renderOptionsTemplate('Dropdown', questionIndex, options)
            },
            YesNo: {
                icon: 'bi-toggle-on',
                name: 'Да/Нет',
                template: () => `
                    <div class="btn-group w-100">
                        <button type="button" class="btn btn-outline-success disabled">Да</button>
                        <button type="button" class="btn btn-outline-danger disabled">Нет</button>
                    </div>`
            }
        };

        let questionCounter = @Model.Questions.Count;

        // Инициализация при загрузке
        document.addEventListener('DOMContentLoaded', () => {
            // Для существующих вопросов
            document.querySelectorAll('.question-item').forEach(item => {
                const type = item.dataset.type;
                initQuestion(item, type);
            });

            // Общая инициализация
            initEventListeners();
            initSortable();
            initDropdowns();
        });

        // Добавляем обработку существующих вопросов
        function initQuestion(questionItem, type) {
            const optionsContainer = questionItem.querySelector('.options-container');
            if (optionsContainer) {
                optionsContainer.querySelectorAll('.input-group').forEach(opt => {
                    opt.querySelector('[data-action="remove-option"]')
                      .addEventListener('click', () => removeOption(opt));
                });
            }
        }

        // Инициализация обработчиков событий
        function initEventListeners() {
            document.addEventListener('click', e => {
                const target = e.target.closest('[data-action]');
                if (!target) return;

                const action = target.dataset.action;
                const questionItem = target.closest('.question-item');

                const actions = {
                    'add-question': () => addQuestion(target.dataset.type),
                    'change-type': () => changeType(questionItem, target.dataset.type),
                    'add-option': () => addOption(questionItem),
                    'remove-option': () => removeOption(target.closest('.input-group')),
                    'duplicate': () => {
                        const questionsToProcess = questionItem ? [questionItem] : getSelectedQuestions();
                        questionsToProcess.forEach(q => duplicateQuestion(q));
                        reindexQuestions();
                    },
                    'delete': () => {
                        const questionsToProcess = questionItem ? [questionItem] : getSelectedQuestions();
                        questionsToProcess.forEach(q => deleteQuestion(q));
                        reindexQuestions();
                    },
                    'toggle-settings': () => toggleSettings(questionItem)
                };

                if (actions[action]) {
                    e.preventDefault();
                    actions[action]();
                }
            });
        }

        // Добавление нового вопроса
        function addQuestion(type) {
            const index = questionCounter++;
            const container = document.getElementById('questionsContainer');

            const questionHTML = `
                <div class="card mb-3 shadow-sm question-item" data-type="${type}" data-question-index="${index}">
                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                        ${generateQuestionHeader(type, index)}
                    </div>
                    <div class="card-body">
                        ${generateQuestionBody(type, index)}
                    </div>
                </div>`;

            container.insertAdjacentHTML('beforeend', questionHTML);
            initDropdowns();
            initValidation();
        }

        // Генерация заголовка вопроса
        function generateQuestionHeader(type, index) {
            return `
                <div class="d-flex align-items-center gap-3">
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-primary dropdown-toggle question-type-btn"
                                type="button"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            <i class="bi ${getQuestionIcon(type)} me-2"></i>
                            <span class="question-type-label">${QUESTION_TYPES[type].name}</span>
                        </button>
                        <ul class="dropdown-menu question-type-menu">
                            ${Object.keys(QUESTION_TYPES).map(t => `
                                <li>
                                    <button class="dropdown-item"
                                            data-action="change-type"
                                            data-type="${t}">
                                        <i class="bi ${getQuestionIcon(t)} me-2"></i>${QUESTION_TYPES[t].name}
                                    </button>
                                </li>
                            `).join('')}
                        </ul>
                    </div>
                    <div class="form-check form-switch">
                        <input type="hidden" type="checkbox" name="Questions[${index}].IsRequired" value="false" style="position: absolute; left: -9999px;" />
                        <input class="form-check-input"
                               type="checkbox"
                               name="Questions[${index}].IsRequired"
                               id="required-${index}">
                        <label class="form-check-label" for="required-${index}">Обязательный</label>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <div class="form-check">
                        <input class="form-check-input question-selector" type="checkbox">
                    </div>
                    <button class="btn btn-link text-danger p-0"
                            data-action="delete">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>`;
        }

        // Генерация тела вопроса
                function generateQuestionBody(type, questionIndex) {
            const typeConfig = QUESTION_TYPES[type];
            return `
                <input type="hidden" name="Questions[${questionIndex}].Order" value="${questionIndex}" class="question-order" />
                <input type="hidden" name="Questions[${questionIndex}].Type" value="${type}" class="question-type" />
                <input type="hidden" name="Questions[${questionIndex}].Template" value="Default" />
                <input type="hidden" name="Questions[${questionIndex}].Description" value="No description" />

                <div class="mb-3">
                    <input name="Questions[${questionIndex}].Text"
                           class="form-control border-0 border-bottom rounded-0 fs-5 px-0 question-title"
                           placeholder="Введите вопрос"
                           required />
                    <span class="text-danger field-validation-valid"
                          data-valmsg-for="Questions[${questionIndex}].Text"
                          data-valmsg-replace="true"></span>
                </div>

                <div class="answer-section mt-3">
                    <label class="form-label">Поле для ответа:</label>
                    ${typeConfig.template(questionIndex)}
                </div>`;
        }

        // Шаблон для вариантов ответов
        function renderOptionsTemplate(type, questionIndex, options = []) {
            return `
                <div class="options-container" data-question-index="${questionIndex}">
                    ${options.map((val, i) => renderOptionItem(type, questionIndex, i, val)).join('')}
                    <button class="btn btn-sm btn-outline-primary w-100"
                            type="button"
                            data-action="add-option">
                        <i class="bi bi-plus-lg me-2"></i>Добавить вариант
                    </button>
                </div>`;
        }

        // Шаблон для одного варианта ответа
        function renderOptionItem(type, questionIndex, optionIndex, value = '') {
            return `
                <div class="input-group mb-2">
                    <span class="input-group-text">
                        <i class="bi ${getOptionIcon(type)}"></i>
                    </span>
                    <input type="text"
                           name="Questions[${questionIndex}].Options[${optionIndex}].Text"
                           class="form-control"
                           placeholder="Вариант ответа"
                           value="${value}">
                    <button class="btn btn-outline-danger"
                            type="button"
                            data-action="remove-option">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>`;
        }

        // Добавление варианта ответа
        function addOption(questionItem) {
            const optionsContainer = questionItem.querySelector('.options-container');
            const questionIndex = questionItem.dataset.questionIndex;
            const optionIndex = optionsContainer.querySelectorAll('.input-group').length;

            optionsContainer.insertAdjacentHTML('beforeend',
                renderOptionItem(questionItem.dataset.type, questionIndex, optionIndex));
            initValidation();
        }

        // Удаление варианта ответа
        function removeOption(optionElement) {
            optionElement.remove();
            updateQuestionIndexes();
        }

        // Изменение типа вопроса
        function changeType(questionItem, newType) {
            const oldType = questionItem.dataset.type;
            if (newType === oldType) return;

            questionItem.dataset.type = newType;
            const typeConfig = QUESTION_TYPES[newType];

            // Обновление заголовка
            const headerBtn = questionItem.querySelector('.question-type-btn');
            headerBtn.innerHTML = `
                <i class="bi ${typeConfig.icon} me-2"></i>
                <span class="question-type-label">${typeConfig.name}</span>
            `;

            // Обновление содержимого
            const body = questionItem.querySelector('.card-body');
            body.innerHTML = generateQuestionBody(newType, questionItem.dataset.questionIndex);
            initDropdowns();
                if(newType === 'Text') {
            const prevType = questionItem.dataset.textType || 'text';
            body.innerHTML = generateQuestionBody(newType, index, prevType);
        }
        }

                // Обработчик изменения типа текста
        document.addEventListener('change', e => {
            if(e.target.classList.contains('text-type-select')) {
                const input = e.target.closest('.row').querySelector('input');
                const type = e.target.value;
                input.type = type === 'text' ? 'text' : type;
            }
        });

        // Обновление индексов вопросов
                function updateQuestionIndexes() {
            document.querySelectorAll('.question-item').forEach((item, index) => {
                const orderInput = item.querySelector('.question-order');
                if (orderInput) orderInput.value = index;
            });
        }

        // Удаление вопроса
        function deleteQuestion(questionItem) {
            questionItem.remove();
            updateQuestionIndexes();
        }

        function duplicateQuestion(questionItem) {
            const clone = questionItem.cloneNode(true);
            clone.querySelector('.question-selector').checked = false;
            questionItem.after(clone);
        }

        function getSelectedQuestions() {
            return Array.from(document.querySelectorAll('.question-selector:checked'))
                .map(checkbox => checkbox.closest('.question-item'))
                .filter(item => item !== null);
        }

        // Drag and drop
        function initSortable() {
            new Sortable(document.getElementById('questionsContainer'), {
                handle: '.card-header',
                animation: 0,
                ghostClass: '',
                onEnd: function(evt) {
                    updateQuestionIndexes();
                }
            });
        }

        function reindexQuestions() {
            document.querySelectorAll('.question-item').forEach((item, index) => {
                // Обновление data-атрибута
                item.dataset.questionIndex = index;

                // Обновление скрытого поля Order
                item.querySelector('.question-order').value = index;

                // Обновление имен полей ввода
                item.querySelectorAll('input, select, textarea').forEach(input => {
                    const name = input.getAttribute('name');
                    if (name) {
                        const newName = name.replace(
                            /Questions\[(\d+)\]/g,
                            `Questions[${index}]`
                        );
                        input.setAttribute('name', newName);
                    }
                });

                // Обновление опций внутри вопроса
                item.querySelectorAll('.options-container [name*="Options"]').forEach((option, optionIndex) => {
                    const name = option.getAttribute('name');
                    if (name) {
                        const newName = name.replace(
                            /Options\[(\d+)\]/g,
                            `Options[${optionIndex}]`
                        );
                        option.setAttribute('name', newName);
                    }
                });
            });

            initValidation();
        }

        function getTextTypeAttributes(type) {
            const attributes = {
                'number': 'type="number"',
                'date': 'type="date"',
                'time': 'type="time"',
                'email': 'type="email"',
                'text': 'type="text"'
            };
            return attributes[type] || 'type="text"';
        }

        // Вспомогательные функции
        function getQuestionIcon(type) {
            return QUESTION_TYPES[type]?.icon || 'bi-question-circle';
        }

        function getOptionIcon(type) {
            return {
                'Radio': 'bi-circle',
                'Checkbox': 'bi-square',
                'Dropdown': 'bi-list-ul'
            }[type] || 'bi-dash';
        }

        function initValidation() {
            $('form').removeData('validator');
            $('form').removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse('form');
        }

        function initDropdowns() {
            document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
                new bootstrap.Dropdown(toggle, {
                    autoClose: true,
                    boundary: 'clippingParents'
                });
            });
        }

        function toggleSettings(questionItem) {
            questionItem.classList.toggle('settings-expanded');
        }
        // Обработчики Drag-and-Drop для изображений
            document.addEventListener('DOMContentLoaded', () => {
            // Инициализация элементов
            const dropZone = document.getElementById('dropZone');
            const fileInput = document.getElementById('fileInput');
            const selectFileButton = document.getElementById('selectFileButton');
            const deleteImageButton = document.getElementById('deleteImageButton');
            const previewContainer = document.getElementById('previewContainer');
            const imagePreview = document.getElementById('imagePreview');

            // Инициализация существующего изображения
            if('@Model.ImagePath' && '@Model.ImagePath' !== '') {
                imagePreview.src = '@Model.ImagePath';
                previewContainer.style.display = 'block';
            }

            // Обработчики событий
            selectFileButton.addEventListener('click', () => fileInput.click());
            deleteImageButton.addEventListener('click', clearImage);

            // Drag-and-drop обработчики
            const preventDefaults = (e) => {
                e.preventDefault();
                e.stopPropagation();
            };

        const dragStartEvents = ['dragenter', 'dragover'];
        for (let i = 0; i < dragStartEvents.length; i++) {
            const eventName = dragStartEvents[i];
            dropZone.addEventListener(eventName, function(e) {
                preventDefaults(e);
                dropZone.classList.add('dragover');
            });
        }

                    const dragEndEvents = ['dragleave', 'drop'];
        for (let j = 0; j < dragEndEvents.length; j++) {
            const eventName = dragEndEvents[j];
            dropZone.addEventListener(eventName, function(e) {
                preventDefaults(e);
                dropZone.classList.remove('dragover');
            });
        }

            dropZone.addEventListener('drop', handleDrop);
            fileInput.addEventListener('change', handleFileSelect);

            // Функции обработки
            function handleDrop(e) {
                const files = e.dataTransfer.files;
                if(files.length > 0) {
                    handleFile(files[0]);
                }
            }

            function handleFileSelect(e) {
                const files = e.target.files;
                if(files.length > 0) {
                    handleFile(files[0]);
                }
            }

            function handleFile(file) {
                if (!file.type.startsWith('image/')) {
                    alert('Пожалуйста, выберите изображение');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    previewContainer.style.display = 'block';
                }
                reader.readAsDataURL(file);

                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                fileInput.files = dataTransfer.files;
            }

            function clearImage() {
                fileInput.value = '';
                imagePreview.src = '';
                previewContainer.style.display = 'none';

                if(document.getElementById('removeImage')) {
                    document.getElementById('removeImage').checked = true;
                }
            }
        });
    </script>

    <style>
        #privateAccessBlock,
        #linkAccessBlock {
            display: none;
        }

        .access-item {
            transition: all 0.2s ease;
            border: 1px solid #dee2e6 !important;
        }

            .access-item:hover {
                border-color: #0d6efd !important;
                background-color: #f8f9fa;
            }

        .form-check-input:checked + .form-check-label .access-item {
            border-color: #0d6efd !important;
            background-color: #e7f1ff;
        }

        .access-item h5 {
            font-size: 1rem;
            font-weight: 500;
        }

        .drop-zone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

            .drop-zone.dragover {
                border-color: #0d6efd;
                background-color: rgba(13, 110, 253, 0.05);
            }

        .drop-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-outline-primary {
            cursor: pointer;
        }

        .question-item {
            border-radius: 0.5rem;
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .question-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
            }

        .question-title {
            font-size: 1.1rem;
            font-weight: 500;
            padding: 0.75rem 1rem;
            border: 2px solid #dee2e6;
            border-radius: 0.5rem;
        }

            .question-title:focus {
                border-color: #86b7fe;
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }

        .option-input {
            border: none;
            border-bottom: 1px solid #dee2e6;
            margin-left: 0.5rem;
            padding: 0.25rem 0.5rem;
        }

            .option-input:focus {
                box-shadow: none;
                border-color: #86b7fe;
            }

        .form-check {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .dropdown-menu {
            padding: 0.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }

        .dropdown-item {
            border-radius: 0.25rem;
            padding: 0.5rem 1rem;
            transition: all 0.2s;
        }

            .dropdown-item:hover {
                background-color: #f8f9fa;
            }

        .question-item {
            cursor: move;
        }

        .card-header {
            cursor: move !important;
        }
    </style>
}

@functions {
    private string GetQuestionIcon(QuestionType type)
    {
        return type switch
        {
            QuestionType.Text => "bi-input-cursor-text",
            QuestionType.Paragraph => "bi-textarea-t",
            QuestionType.Radio => "bi-ui-radios",
            QuestionType.Checkbox => "bi-ui-checks-grid",
            QuestionType.Dropdown => "bi-menu-button",
            QuestionType.YesNo => "bi-toggle-on",
            _ => "bi-question-circle"
        };
    }

    private string GetOptionIcon(QuestionType type)
    {
        return type switch
        {
            QuestionType.Radio => "bi-circle",
            QuestionType.Checkbox => "bi-check-square",
            QuestionType.Dropdown => "bi-caret-down-fill",
            _ => "bi-circle"
        };
    }

    private string GetInputAttributes(string textType)
    {
        return textType switch
        {
            "number" => "type=\"number\"",
            "date" => "type=\"date\"",
            "time" => "type=\"time\"",
            "email" => "type=\"email\"",
            _ => "type=\"text\""
        };
    }
    private string GetQuestionTypeName(QuestionType type)
    {
        return type switch
        {
            QuestionType.Text => "Текстовый ответ",
            QuestionType.Paragraph => "Абзац",
            QuestionType.Radio => "Один из списка",
            QuestionType.Checkbox => "Несколько из списка",
            QuestionType.Dropdown => "Выпадающий список",
            QuestionType.YesNo => "Да/Нет",
            _ => "Неизвестный тип"
        };
    }
}